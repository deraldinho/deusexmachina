name: DeusExMachina CI/CD

# Controla quando o workflow ser√° executado
on:
  # Aciona o workflow em pushes ou pull requests para a branch "main"
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Permite executar este workflow manualmente a partir da aba Actions do GitHub
  workflow_dispatch:

jobs:
  # --- FASE DE INTEGRA√á√ÉO CONT√çNUA (CI) ---
  build_and_test:
    name: Build and Smoke Test
    # O tipo de m√°quina virtual que o job ir√° rodar
    runs-on: ubuntu-latest

    steps:
      # 1. Baixa o c√≥digo do reposit√≥rio para a m√°quina virtual do runner
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Prepara o arquivo .env para que o docker compose possa us√°-lo
      - name: Setup .env File
        run: cp .env.example .env

      # 3. Usa o Makefile para iniciar todos os servi√ßos
      - name: Start Services
        run: make up

      # 4. "Smoke Test": Verifica se os servi√ßos essenciais est√£o respondendo.
      #    Aguarda at√© 2 minutos pelo n8n, que pode demorar mais para iniciar.
      - name: Wait for Services to be Healthy
        run: |
          echo "Aguardando n8n ficar saud√°vel..."
          timeout 120s bash -c 'until curl --fail -s http://localhost:5678/healthz &> /dev/null; do echo "Aguardando n8n..."; sleep 5; done'
          echo "‚úÖ n8n est√° online."
          echo "Aguardando Adminer responder..."
          timeout 60s bash -c 'until curl --fail -s http://localhost:8080 &> /dev/null; do echo "Aguardando Adminer..."; sleep 5; done'
          echo "‚úÖ Adminer est√° online."

      # 5. (Opcional) Mostra o status dos containers para debug em caso de falha
      - name: Show Container Status
        if: always() # Executa mesmo se os passos anteriores falharem
        run: docker compose ps

      # 6. Garante que todos os containers sejam parados ao final do job
      - name: Teardown Services
        if: always() # Executa sempre para limpar o ambiente
        run: make down

  # --- FASE DE ENTREGA CONT√çNUA (CD) ---
  deploy:
    name: Deploy to Production
    # Depende do sucesso do job anterior
    needs: build_and_test
    # Condi√ß√£o: Executar apenas em um PUSH para a branch MAIN
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Server via SSH
        # Usa uma Action da comunidade para facilitar a execu√ß√£o de comandos via SSH
        uses: appleboy/ssh-action@master
        with:
          # Segredos que devem ser configurados no GitHub > Settings > Secrets and variables > Actions
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            # Navega at√© o diret√≥rio do projeto no servidor
            cd /var/www/DeusExMachina # <-- IMPORTANTE: Use o caminho correto no seu servidor
            
            # Puxa as √∫ltimas altera√ß√µes da branch main
            echo "üîÑ Puxando atualiza√ß√µes do reposit√≥rio..."
            git pull origin main
            
            # Usa o Makefile para reiniciar a aplica√ß√£o com a nova vers√£o
            echo "üöÄ Reiniciando a aplica√ß√£o com 'make down' e 'make up'..."
            make down
            make up
            
            echo "‚úÖ Deploy conclu√≠do com sucesso!"