# scripts/ollama_entrypoint.sh
# SPDX-License-Identifier: Apache-2.0
#!/bin/sh
set -e

echo "üöÄ Iniciando o entrypoint customizado do Ollama..."

# Inicia o servidor Ollama em segundo plano
ollama serve &

# Captura o Process ID (PID) do servidor que foi para o background
pid=$!
echo "Servidor Ollama iniciado em segundo plano com PID: $pid"

# Aguarda um momento para garantir que o servidor esteja pronto para receber conex√µes
sleep 3

# Puxa o modelo inicial, se ainda n√£o existir
# Isso √© mais eficiente do que puxar toda vez.
MODEL_TO_CHECK="deepseek-r1:1.5b"
if ! ollama list | grep -q "$MODEL_TO_CHECK"; then
  echo "Modelo '$MODEL_TO_CHECK' n√£o encontrado. Baixando agora..."
  ollama pull "$MODEL_TO_CHECK"
  echo "‚úÖ Modelo baixado com sucesso."
else
  echo "‚úÖ Modelo '$MODEL_TO_CHECK' j√° existe. Pulando o download."
fi

# Puxa o modelo inicial, se ainda n√£o existir
# Isso √© mais eficiente do que puxar toda vez.
MODEL_TO_CHECK="qwen3:1.7b"
if ! ollama list | grep -q "$MODEL_TO_CHECK"; then
  echo "Modelo '$MODEL_TO_CHECK' n√£o encontrado. Baixando agora..."
  ollama pull "$MODEL_TO_CHECK"
  echo "‚úÖ Modelo baixado com sucesso."
else
  echo "‚úÖ Modelo '$MODEL_TO_CHECK' j√° existe. Pulando o download."
fi

# Puxa o modelo inicial, se ainda n√£o existir
# Isso √© mais eficiente do que puxar toda vez.
MODEL_TO_CHECK="deepscaler:1.5b"
if ! ollama list | grep -q "$MODEL_TO_CHECK"; then
  echo "Modelo '$MODEL_TO_CHECK' n√£o encontrado. Baixando agora..."
  ollama pull "$MODEL_TO_CHECK"
  echo "‚úÖ Modelo baixado com sucesso."
else
  echo "‚úÖ Modelo '$MODEL_TO_CHECK' j√° existe. Pulando o download."
fi

echo "‚ú® Configura√ß√£o inicial conclu√≠da. O servidor continuar√° em execu√ß√£o."

# Aguarda o processo do servidor Ollama (que est√° em background) terminar.
# Se o servidor cair por algum motivo, o script ir√° terminar e o container ir√° parar.
wait $pid